{"version":3,"sources":["App.tsx","index.js"],"names":["App","wait","useRef","useState","isPaused","setIsPaused","ticker","setTicker","isStarted","setIsStarted","useEffect","current","click$","fromEvent","doubleClick$","pipe","buffer","debounceTime","map","clicks","length","filter","tap","subscribe$","Subject","interval","takeUntil","subscribe","v","next","complete","Date","toISOString","slice","onClick","ref","ReactDOM","render","document","getElementById"],"mappings":"uQAIaA,EAAgB,WAEzB,IAAMC,EAAOC,iBAAiC,MAC9C,EAAgCC,oBAAkB,GAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAiB,GAA7C,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAkCJ,oBAAkB,GAApD,mBAAOK,EAAP,KAAkBC,EAAlB,KAIAC,qBAAU,WACN,GAAIT,GAAQA,EAAKU,QAAS,CACtB,IAAMC,EAASC,YAAiBZ,EAAKU,QAAS,SACxCG,EAAeF,EAAOG,KACxBC,YAAOJ,EAAOG,KAAKE,YAAa,OAChCC,aAAI,SAAAC,GAAM,OAAIA,EAAOC,UACrBC,aAAO,SAAAD,GAAM,OAAe,IAAXA,KACjBE,aAAI,kBAAMjB,GAAY,OAGpBkB,EAAa,IAAIC,IAUvB,OATAC,YAAS,KACJV,KACGW,YAAUH,GACVG,YAAUZ,IAEba,WAAU,YACNvB,GAAYI,GAAaD,GAAU,SAAAqB,GAAC,OAAIA,EAAI,UAG9C,WACHL,EAAWM,OACXN,EAAWO,eAGpB,CAACtB,EAAWJ,IAgBf,OAAO,gCAEH,6BAAK,IAAI2B,KAAKzB,GAAQ0B,cAAcC,MAAM,GAAI,MAE9C,wBAAQC,QAlBE,WACN9B,EACAC,GAAY,IAEZI,GAAcD,GACdD,EAAU,KAad,wBACA,wBAAQ4B,IAAKlC,EAAb,kBACA,wBAAQiC,QAXE,WACV3B,EAAU,GACVF,GAAY,IASZ,uBCxDR+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a5fb1a5f.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {fromEvent, interval, Subject} from 'rxjs';\nimport {buffer, debounceTime, filter, map, takeUntil, tap} from \"rxjs/operators\";\n\nexport const App: React.FC = () => {\n\n    const wait = useRef<HTMLButtonElement | null>(null);\n    const [isPaused, setIsPaused] = useState<boolean>(false);\n    const [ticker, setTicker] = useState<number>(0);\n    const [isStarted, setIsStarted] = useState<boolean>(false);\n\n\n\n    useEffect(() => {\n        if (wait && wait.current) {\n            const click$ = fromEvent<Event>(wait.current, 'click');\n            const doubleClick$ = click$.pipe(\n                buffer(click$.pipe(debounceTime(300))),\n                map(clicks => clicks.length),\n                filter(length => length === 2),\n                tap(() => setIsPaused(true))\n            )\n\n            const subscribe$ = new Subject<number>();\n            interval(1000)\n                .pipe(\n                    takeUntil(subscribe$),\n                    takeUntil(doubleClick$)\n                )\n                .subscribe(() => {\n                    !isPaused && isStarted && setTicker(v => v + 1000)\n                });\n\n            return () => {\n                subscribe$.next();\n                subscribe$.complete();\n            };\n        }\n    }, [isStarted, isPaused]);\n\n    const start = () => {\n        if (isPaused) {\n            setIsPaused(false)\n        } else {\n            setIsStarted(!isStarted);\n            setTicker(0)\n        }\n    }\n\n    const reset = () => {\n        setTicker(0);\n        setIsPaused(false)\n    }\n\n    return <div>\n\n        <h1>{new Date(ticker).toISOString().slice(11, 19)}</h1>\n\n        <button onClick={start}>Start/Stop</button>\n        <button ref={wait}>Wait</button>\n        <button onClick={reset}>Reset\n        </button>\n    </div>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}