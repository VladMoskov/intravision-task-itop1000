{"version":3,"sources":["App.js","index.js"],"names":["App","wait","useRef","useState","isPaused","setIsPaused","ticker","setTicker","isStarted","setIsStarted","useEffect","click$","fromEvent","current","doubleClick$","pipe","buffer","debounceTime","map","clicks","length","filter","tap","subscribe$","Subject","interval","takeUntil","subscribe","v","next","complete","Date","toISOString","slice","onClick","ref","ReactDOM","render","document","getElementById"],"mappings":"uQAIO,SAASA,IAEZ,IAAMC,EAAOC,iBAAO,MACpB,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAIAC,qBAAU,WAEN,IAAMC,EAASC,YAAUX,EAAKY,QAAS,SACjCC,EAAeH,EAAOI,KACxBC,YAAOL,EAAOI,KAAKE,YAAa,OAChCC,aAAI,SAAAC,GAAM,OAAIA,EAAOC,UACrBC,aAAO,SAAAD,GAAM,OAAe,IAAXA,KACjBE,aAAI,kBAAMjB,GAAY,OAGpBkB,EAAa,IAAIC,IAUvB,OATAC,YAAS,KACJV,KACGW,YAAUH,GACVG,YAAUZ,IAEba,WAAU,YACNvB,GAAYI,GAAaD,GAAU,SAAAqB,GAAC,OAAIA,EAAI,UAG9C,WACHL,EAAWM,OACXN,EAAWO,cAEhB,CAACtB,EAAWJ,IAgBf,OAAO,gCAEH,6BAAK,IAAI2B,KAAKzB,GAAQ0B,cAAcC,MAAM,GAAI,MAE9C,wBAAQC,QAlBE,WACN9B,EACAC,GAAY,IAEZI,GAAcD,GACdD,EAAU,KAad,wBACA,wBAAQ4B,IAAKlC,EAAb,kBACA,wBAAQiC,QAXE,WACV3B,EAAU,GACVF,GAAY,IASZ,sBCvDR+B,IAASC,OACL,cAACrC,EAAD,IACFsC,SAASC,eAAe,W","file":"static/js/main.d3162f6e.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {fromEvent, interval, Subject} from 'rxjs';\nimport {buffer, debounceTime, filter, map, takeUntil, tap} from \"rxjs/operators\";\n\nexport function App() {\n\n    const wait = useRef(null);\n    const [isPaused, setIsPaused] = useState(false);\n    const [ticker, setTicker] = useState(0);\n    const [isStarted, setIsStarted] = useState(false);\n\n\n\n    useEffect(() => {\n\n        const click$ = fromEvent(wait.current, 'click');\n        const doubleClick$ = click$.pipe(\n            buffer(click$.pipe(debounceTime(300))),\n            map(clicks => clicks.length),\n            filter(length => length === 2),\n            tap(() => setIsPaused(true))\n        )\n\n        const subscribe$ = new Subject();\n        interval(1000)\n            .pipe(\n                takeUntil(subscribe$),\n                takeUntil(doubleClick$)\n            )\n            .subscribe(() => {\n                !isPaused && isStarted && setTicker(v => v + 1000)\n            });\n\n        return () => {\n            subscribe$.next();\n            subscribe$.complete();\n        };\n    }, [isStarted, isPaused]);\n\n    const start = () => {\n        if (isPaused) {\n            setIsPaused(false)\n        } else {\n            setIsStarted(!isStarted);\n            setTicker(0)\n        }\n    }\n\n    const reset = () => {\n        setTicker(0);\n        setIsPaused(false)\n    }\n\n    return <div>\n\n        <h1>{new Date(ticker).toISOString().slice(11, 19)}</h1>\n\n        <button onClick={start}>Start/Stop</button>\n        <button ref={wait}>Wait</button>\n        <button onClick={reset}>Reset\n        </button>\n    </div>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}